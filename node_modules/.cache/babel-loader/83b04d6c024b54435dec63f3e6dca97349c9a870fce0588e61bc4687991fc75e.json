{"ast":null,"code":"var _jsxFileName = \"C:\\\\APP_Evernote\\\\javascript_note\\\\src\\\\components\\\\notes\\\\editor\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState, useEffect } from 'react';\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css'; // Quill visual theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Editor(props) {\n  _s();\n  const [currentContent, setCurrentContent] = useState('');\n\n  // Auto save method\n  const [timer, setTimer] = useState(null);\n\n  // Generating the title through the body. \n  // It will show the first 30 characters of the note as the title.\n  const updateNote = content => {\n    const title = content.replace(/(<([^>]+)>)/ig, \"\").slice(0, 30);\n    props.updateNote(props.note, {\n      'title': title,\n      'body': content\n    });\n  };\n  const handleChange = (content, delta, source) => {\n    clearTimeout(timer);\n    if (source == 'user') {\n      setCurrentContent(content);\n      setTimer(setTimeout(() => updateNote(content), 3000));\n    }\n  };\n  useEffect(() => {\n    setCurrentContent(props.note.body);\n  }, [props.note]);\n\n  // Editing options available for user to create their note.\n  const modules = {\n    toolbar: [[{\n      'header': '1'\n    }, {\n      'header': '2'\n    }, {\n      'font': []\n    }], ['bold', 'italic', 'underline', 'strike', 'blockquote', 'code-block'], [{\n      'list': 'ordered'\n    }, {\n      'list': 'bullet'\n    }, {\n      'indent': '-1'\n    }, {\n      'indent': '+1'\n    }], ['link'], ['clean']]\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactQuill, {\n      value: currentContent,\n      modules: modules\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(Editor, \"U4ZOxZkXbmYsjeN89466gE7sR7o=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","Fragment","useState","useEffect","ReactQuill","jsxDEV","_jsxDEV","Editor","props","_s","currentContent","setCurrentContent","timer","setTimer","updateNote","content","title","replace","slice","note","handleChange","delta","source","clearTimeout","setTimeout","body","modules","toolbar","children","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/APP_Evernote/javascript_note/src/components/notes/editor/index.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport ReactQuill from 'react-quill'; // ES6\r\nimport 'react-quill/dist/quill.snow.css'; // Quill visual theme\r\n\r\nfunction Editor(props) {\r\n    const [currentContent, setCurrentContent] = useState('')\r\n\r\n    // Auto save method\r\n    const [timer, setTimer] = useState(null)\r\n\r\n\r\n    // Generating the title through the body. \r\n    // It will show the first 30 characters of the note as the title.\r\n    const updateNote = (content) => {\r\n        const title = content.replace(/(<([^>]+)>)/ig, \"\").slice(0, 30);\r\n        props.updateNote(props.note, {'title': title, 'body': content})\r\n    }\r\n\r\n\r\n\r\n    const handleChange = (content, delta, source) =>{\r\n        clearTimeout(timer);\r\n    if(source == 'user'){\r\n        setCurrentContent(content)\r\n        setTimer(setTimeout(() => updateNote(content), 3000))\r\n    }\r\n}\r\n\r\n    useEffect(()=> {\r\n        setCurrentContent(props.note.body)\r\n    }, [props.note])\r\n\r\n    // Editing options available for user to create their note.\r\n    const modules = {\r\n        toolbar: [\r\n            [{ 'header': '1'}, {'header': '2'}, { 'font': [] }],\r\n            ['bold', 'italic', 'underline', 'strike', 'blockquote', 'code-block'],\r\n            [{'list': 'ordered'}, {'list': 'bullet'},\r\n            {'indent': '-1'}, {'indent': '+1'}],\r\n            ['link'],\r\n            ['clean'],\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactQuill value={currentContent} modules={modules}/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Editor;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE5D,OAAOC,UAAU,MAAM,aAAa,CAAC,CAAC;AACtC,OAAO,iCAAiC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,MAAMA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACnB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAGxC;EACA;EACA,MAAMY,UAAU,GAAIC,OAAO,IAAK;IAC5B,MAAMC,KAAK,GAAGD,OAAO,CAACE,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC/DV,KAAK,CAACM,UAAU,CAACN,KAAK,CAACW,IAAI,EAAE;MAAC,OAAO,EAAEH,KAAK;MAAE,MAAM,EAAED;IAAO,CAAC,CAAC;EACnE,CAAC;EAID,MAAMK,YAAY,GAAGA,CAACL,OAAO,EAAEM,KAAK,EAAEC,MAAM,KAAI;IAC5CC,YAAY,CAACX,KAAK,CAAC;IACvB,IAAGU,MAAM,IAAI,MAAM,EAAC;MAChBX,iBAAiB,CAACI,OAAO,CAAC;MAC1BF,QAAQ,CAACW,UAAU,CAAC,MAAMV,UAAU,CAACC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;IACzD;EACJ,CAAC;EAEGZ,SAAS,CAAC,MAAK;IACXQ,iBAAiB,CAACH,KAAK,CAACW,IAAI,CAACM,IAAI,CAAC;EACtC,CAAC,EAAE,CAACjB,KAAK,CAACW,IAAI,CAAC,CAAC;;EAEhB;EACA,MAAMO,OAAO,GAAG;IACZC,OAAO,EAAE,CACL,CAAC;MAAE,QAAQ,EAAE;IAAG,CAAC,EAAE;MAAC,QAAQ,EAAE;IAAG,CAAC,EAAE;MAAE,MAAM,EAAE;IAAG,CAAC,CAAC,EACnD,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAY,CAAC,EACrE,CAAC;MAAC,MAAM,EAAE;IAAS,CAAC,EAAE;MAAC,MAAM,EAAE;IAAQ,CAAC,EACxC;MAAC,QAAQ,EAAE;IAAI,CAAC,EAAE;MAAC,QAAQ,EAAE;IAAI,CAAC,CAAC,EACnC,CAAC,MAAM,CAAC,EACR,CAAC,OAAO,CAAC;EAEjB,CAAC;EAED,oBACIrB,OAAA,CAACL,QAAQ;IAAA2B,QAAA,eACLtB,OAAA,CAACF,UAAU;MAACyB,KAAK,EAAEnB,cAAe;MAACgB,OAAO,EAAEA;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEnB;AAACxB,EAAA,CA7CQF,MAAM;AAAA2B,EAAA,GAAN3B,MAAM;AA+Cf,eAAeA,MAAM;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}